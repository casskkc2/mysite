<?phpnamespace Home\Event;use Think\Controller;class ExcelEvent extends Controller {		public function export($cols, $rows, $fname) {		error_reporting(E_ALL);		import('Vendor.PHPExcel.Classes.PHPExcel', '', '.php');		$objPHPExcel = new \PHPExcel();		$objPHPExcel->getProperties()->setCreator("sys")									 ->setLastModifiedBy("sys")									 ->setTitle("Excel Document")									 ->setSubject("Excel Document")									 ->setDescription("Excel Document")									 ->setKeywords("openxml php")									 ->setCategory("excel file");									 		$objPHPExcel->setActiveSheetIndex(0);		//$Col_C_Max_Width = 80;// 80/40 * 6 = 12				$col_cfg = array();				foreach($cols as $k=>$col) {			$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($k, 1, $col);		}				foreach($rows as $k=>$row) {			foreach($row as $j=>$val) {				if (is_array($val)) {					$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($j, $k+2, $val['text']);					$objPHPExcel->getActiveSheet()->getCellByColumnAndRow($j, $k+2)->getHyperlink()->setUrl($val['url']);				}else if ($j == 8) { // target code					$objPHPExcel->getActiveSheet()->getCellByColumnAndRow($j, $k+2)->setValueExplicit($val, \PHPExcel_Cell_DataType::TYPE_STRING);				}else{					$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($j, $k+2, $val);				}			}		}				// Set Sheet Title		$objPHPExcel->getActiveSheet()->setTitle('Sheet1');		// Set 		$styleArray = array( 			//'font' => array( 'bold' => true, ), 			'alignment' => array( 				'horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_RIGHT, 				'vertical' => \PHPExcel_Style_Alignment::VERTICAL_TOP			), 			/*'borders' => array( 				'top' => array( 'style' => PHPExcel_Style_Border::BORDER_THIN, ), 			), 			'fill' => array( 				'type' => PHPExcel_Style_Fill::FILL_GRADIENT_LINEAR, 				'rotation' => 90, 				'startcolor' => array( 'argb' => 'FFA0A0A0', ), 				'endcolor' => array( 'argb' => 'FFFFFFFF', ), 			), */		);		//$objPHPExcel->getActiveSheet()->getStyle('A2:B3')->applyFromArray($styleArray);		//$objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth($Col_C_Max_Width / 40 * 6);//setAutoSize(true);				/*		header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'); 		header('Content-Disposition: attachment;filename="' . $fname . '.xlsx"'); 		header('Cache-Control: max-age=0');		$objWriter = \PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');		//$objWriter->save($fpath . '.xlsx');		$objWriter->save('php://output');*/				header('Content-Type: application/vnd.ms-excel'); 		header('Content-Disposition: attachment;filename="' . $fname . '.xls"'); 		header('Cache-Control: max-age=0'); 		$objWriter = \PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5'); 		$objWriter->save('php://output');	}		public function importIssue($fpath, $user, $city) {		import('Vendor.PHPExcel.Classes.PHPExcel.IOFactory', '', '.php');		//require_once dirname(__FILE__) . '/Classes/PHPExcel/IOFactory.php';		$inputFileName = $fpath;		// Identify the type of $inputFileName 		$inputFileType = \PHPExcel_IOFactory::identify($inputFileName);//exit($inputFileType);		//echo 'Loading ' , $inputFileName , ' using ' , $inputFileType , " Reader" , PHP_EOL;		// Create a new Reader of the type that has been identified 		$objReader = \PHPExcel_IOFactory::createReader($inputFileType);		// Load $inputFileName to a PHPExcel Object  		$objReader->setReadDataOnly(true);		$objPHPExcel = $objReader->load($inputFileName);		$workSheet = $objPHPExcel->getActiveSheet();		$file_cols_to_db_cols = array(			0	=> 'area1',			1	=> 'area2',			2	=> 'area3',			3	=> 'area4',			4	=> 'target1',			5	=> 'target2',			6	=> 'target3',			7	=> 'target_code',			8	=> 'title',			11	=> 'weight',			12	=> 'img',			13	=> 'des'		);		$ret = array(			'total' 		=> 0,			'success_num' 	=> 0,			'fail_num' 		=> 0,			'fails' 		=> array()		);		$fails = array();				$IssueEvent = A('Issue', 'Event');		foreach($workSheet->getRowIterator() as $key=>$row) {			//echo $key,'<br />';			if($key < 2) continue;			$cellIterator = $row->getCellIterator();			$cellIterator->setIterateOnlyExistingCells(false);// This loops all cells, even if it is not set. By default, only cells that are set will be iterated.			$data = array(				'user_id'	=> $user['id'],				'city_id'	=> $city['city_id']			);			foreach($cellIterator as $k=>$cell) {				if ($k == 9) {					$data['examine_time'] = str_replace(' ', '', $cell->getValue());				}else if ($k == 10) {					$data['examine_time'] .= ' ' . str_replace(' ', '', $cell->getValue());				}else if ( isset($file_cols_to_db_cols[$k])) {					$data[$file_cols_to_db_cols[$k]] = str_replace(' ', '', $cell->getValue());				}			}			$ret['total'] += 1;			//print_r($data);			$rs = $IssueEvent->importOneRow($data);			if ($rs['code'] == 0) {				$ret['success_num'] += 1;			}else {				$ret['fail_num'] += 1;				$ret['fails'][] = array(					'seq'	=> $key,					'error'	=> $rs['error']				);			}		}		return $ret;	}}